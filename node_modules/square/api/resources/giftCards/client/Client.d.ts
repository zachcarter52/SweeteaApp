/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { Activities } from "../resources/activities/client/Client";
export declare namespace GiftCards {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class GiftCards {
    protected readonly _options: GiftCards.Options;
    protected _activities: Activities | undefined;
    constructor(_options?: GiftCards.Options);
    get activities(): Activities;
    /**
     * Lists all gift cards. You can specify optional filters to retrieve
     * a subset of the gift cards. Results are sorted by `created_at` in ascending order.
     *
     * @param {Square.ListGiftCardsRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.list()
     */
    list(request?: Square.ListGiftCardsRequest, requestOptions?: GiftCards.RequestOptions): Promise<core.Page<Square.GiftCard>>;
    /**
     * Creates a digital gift card or registers a physical (plastic) gift card. The resulting gift card
     * has a `PENDING` state. To activate a gift card so that it can be redeemed for purchases, call
     * [CreateGiftCardActivity](api-endpoint:GiftCardActivities-CreateGiftCardActivity) and create an `ACTIVATE`
     * activity with the initial balance. Alternatively, you can use [RefundPayment](api-endpoint:Refunds-RefundPayment)
     * to refund a payment to the new gift card.
     *
     * @param {Square.CreateGiftCardRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.create({
     *         idempotencyKey: "NC9Tm69EjbjtConu",
     *         locationId: "81FN9BNFZTKS4",
     *         giftCard: {
     *             type: "DIGITAL"
     *         }
     *     })
     */
    create(request: Square.CreateGiftCardRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.CreateGiftCardResponse>;
    /**
     * Retrieves a gift card using the gift card account number (GAN).
     *
     * @param {Square.GetGiftCardFromGanRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.getFromGan({
     *         gan: "7783320001001635"
     *     })
     */
    getFromGan(request: Square.GetGiftCardFromGanRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.GetGiftCardFromGanResponse>;
    /**
     * Retrieves a gift card using a secure payment token that represents the gift card.
     *
     * @param {Square.GetGiftCardFromNonceRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.getFromNonce({
     *         nonce: "cnon:7783322135245171"
     *     })
     */
    getFromNonce(request: Square.GetGiftCardFromNonceRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.GetGiftCardFromNonceResponse>;
    /**
     * Links a customer to a gift card, which is also referred to as adding a card on file.
     *
     * @param {Square.LinkCustomerToGiftCardRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.linkCustomer({
     *         giftCardId: "gift_card_id",
     *         customerId: "GKY0FZ3V717AH8Q2D821PNT2ZW"
     *     })
     */
    linkCustomer(request: Square.LinkCustomerToGiftCardRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.LinkCustomerToGiftCardResponse>;
    /**
     * Unlinks a customer from a gift card, which is also referred to as removing a card on file.
     *
     * @param {Square.UnlinkCustomerFromGiftCardRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.unlinkCustomer({
     *         giftCardId: "gift_card_id",
     *         customerId: "GKY0FZ3V717AH8Q2D821PNT2ZW"
     *     })
     */
    unlinkCustomer(request: Square.UnlinkCustomerFromGiftCardRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.UnlinkCustomerFromGiftCardResponse>;
    /**
     * Retrieves a gift card using the gift card ID.
     *
     * @param {Square.GetGiftCardsRequest} request
     * @param {GiftCards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.get({
     *         id: "id"
     *     })
     */
    get(request: Square.GetGiftCardsRequest, requestOptions?: GiftCards.RequestOptions): Promise<Square.GetGiftCardResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
