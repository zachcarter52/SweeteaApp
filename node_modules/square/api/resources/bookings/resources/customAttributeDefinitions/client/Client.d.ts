/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace CustomAttributeDefinitions {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class CustomAttributeDefinitions {
    protected readonly _options: CustomAttributeDefinitions.Options;
    constructor(_options?: CustomAttributeDefinitions.Options);
    /**
     * Get all bookings custom attribute definitions.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.bookings.ListCustomAttributeDefinitionsRequest} request
     * @param {CustomAttributeDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributeDefinitions.list()
     */
    list(request?: Square.bookings.ListCustomAttributeDefinitionsRequest, requestOptions?: CustomAttributeDefinitions.RequestOptions): Promise<core.Page<Square.CustomAttributeDefinition>>;
    /**
     * Creates a bookings custom attribute definition.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.CreateBookingCustomAttributeDefinitionRequest} request
     * @param {CustomAttributeDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributeDefinitions.create({
     *         customAttributeDefinition: {}
     *     })
     */
    create(request: Square.bookings.CreateBookingCustomAttributeDefinitionRequest, requestOptions?: CustomAttributeDefinitions.RequestOptions): Promise<Square.CreateBookingCustomAttributeDefinitionResponse>;
    /**
     * Retrieves a bookings custom attribute definition.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.bookings.GetCustomAttributeDefinitionsRequest} request
     * @param {CustomAttributeDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributeDefinitions.get({
     *         key: "key"
     *     })
     */
    get(request: Square.bookings.GetCustomAttributeDefinitionsRequest, requestOptions?: CustomAttributeDefinitions.RequestOptions): Promise<Square.RetrieveBookingCustomAttributeDefinitionResponse>;
    /**
     * Updates a bookings custom attribute definition.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.UpdateBookingCustomAttributeDefinitionRequest} request
     * @param {CustomAttributeDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributeDefinitions.update({
     *         key: "key",
     *         customAttributeDefinition: {}
     *     })
     */
    update(request: Square.bookings.UpdateBookingCustomAttributeDefinitionRequest, requestOptions?: CustomAttributeDefinitions.RequestOptions): Promise<Square.UpdateBookingCustomAttributeDefinitionResponse>;
    /**
     * Deletes a bookings custom attribute definition.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.DeleteCustomAttributeDefinitionsRequest} request
     * @param {CustomAttributeDefinitions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributeDefinitions.delete({
     *         key: "key"
     *     })
     */
    delete(request: Square.bookings.DeleteCustomAttributeDefinitionsRequest, requestOptions?: CustomAttributeDefinitions.RequestOptions): Promise<Square.DeleteBookingCustomAttributeDefinitionResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
