/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Evidence {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Evidence {
    protected readonly _options: Evidence.Options;
    constructor(_options?: Evidence.Options);
    /**
     * Returns a list of evidence associated with a dispute.
     *
     * @param {Square.disputes.ListEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.list({
     *         disputeId: "dispute_id"
     *     })
     */
    list(request: Square.disputes.ListEvidenceRequest, requestOptions?: Evidence.RequestOptions): Promise<core.Page<Square.DisputeEvidence>>;
    /**
     * Returns the metadata for the evidence specified in the request URL path.
     *
     * You must maintain a copy of any evidence uploaded if you want to reference it later. Evidence cannot be downloaded after you upload it.
     *
     * @param {Square.disputes.GetEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.get({
     *         disputeId: "dispute_id",
     *         evidenceId: "evidence_id"
     *     })
     */
    get(request: Square.disputes.GetEvidenceRequest, requestOptions?: Evidence.RequestOptions): Promise<Square.GetDisputeEvidenceResponse>;
    /**
     * Removes specified evidence from a dispute.
     * Square does not send the bank any evidence that is removed.
     *
     * @param {Square.disputes.DeleteEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.delete({
     *         disputeId: "dispute_id",
     *         evidenceId: "evidence_id"
     *     })
     */
    delete(request: Square.disputes.DeleteEvidenceRequest, requestOptions?: Evidence.RequestOptions): Promise<Square.DeleteDisputeEvidenceResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
