/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace WageSetting {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class WageSetting {
    protected readonly _options: WageSetting.Options;
    constructor(_options?: WageSetting.Options);
    /**
     * Retrieves a `WageSetting` object for a team member specified
     * by `TeamMember.id`. For more information, see
     * [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
     *
     * Square recommends using [RetrieveTeamMember](api-endpoint:Team-RetrieveTeamMember) or [SearchTeamMembers](api-endpoint:Team-SearchTeamMembers)
     * to get this information directly from the `TeamMember.wage_setting` field.
     *
     * @param {Square.teamMembers.GetWageSettingRequest} request
     * @param {WageSetting.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.wageSetting.get({
     *         teamMemberId: "team_member_id"
     *     })
     */
    get(request: Square.teamMembers.GetWageSettingRequest, requestOptions?: WageSetting.RequestOptions): Promise<Square.GetWageSettingResponse>;
    /**
     * Creates or updates a `WageSetting` object. The object is created if a
     * `WageSetting` with the specified `team_member_id` doesn't exist. Otherwise,
     * it fully replaces the `WageSetting` object for the team member.
     * The `WageSetting` is returned on a successful update. For more information, see
     * [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
     *
     * Square recommends using [CreateTeamMember](api-endpoint:Team-CreateTeamMember) or [UpdateTeamMember](api-endpoint:Team-UpdateTeamMember)
     * to manage the `TeamMember.wage_setting` field directly.
     *
     * @param {Square.teamMembers.UpdateWageSettingRequest} request
     * @param {WageSetting.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.teamMembers.wageSetting.update({
     *         teamMemberId: "team_member_id",
     *         wageSetting: {
     *             jobAssignments: [{
     *                     jobTitle: "Manager",
     *                     payType: "SALARY",
     *                     annualRate: {
     *                         amount: 3000000,
     *                         currency: "USD"
     *                     },
     *                     weeklyHours: 40
     *                 }, {
     *                     jobTitle: "Cashier",
     *                     payType: "HOURLY",
     *                     hourlyRate: {
     *                         amount: 2000,
     *                         currency: "USD"
     *                     }
     *                 }],
     *             isOvertimeExempt: true
     *         }
     *     })
     */
    update(request: Square.teamMembers.UpdateWageSettingRequest, requestOptions?: WageSetting.RequestOptions): Promise<Square.UpdateWageSettingResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
