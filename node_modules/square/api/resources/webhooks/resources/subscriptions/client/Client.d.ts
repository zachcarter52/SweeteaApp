/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Subscriptions {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Subscriptions {
    protected readonly _options: Subscriptions.Options;
    constructor(_options?: Subscriptions.Options);
    /**
     * Lists all webhook subscriptions owned by your application.
     *
     * @param {Square.webhooks.ListSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.list()
     */
    list(request?: Square.webhooks.ListSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<core.Page<Square.WebhookSubscription>>;
    /**
     * Creates a webhook subscription.
     *
     * @param {Square.webhooks.CreateWebhookSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.create({
     *         idempotencyKey: "63f84c6c-2200-4c99-846c-2670a1311fbf",
     *         subscription: {
     *             name: "Example Webhook Subscription",
     *             eventTypes: ["payment.created", "payment.updated"],
     *             notificationUrl: "https://example-webhook-url.com",
     *             apiVersion: "2021-12-15"
     *         }
     *     })
     */
    create(request: Square.webhooks.CreateWebhookSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.CreateWebhookSubscriptionResponse>;
    /**
     * Retrieves a webhook subscription identified by its ID.
     *
     * @param {Square.webhooks.GetSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.get({
     *         subscriptionId: "subscription_id"
     *     })
     */
    get(request: Square.webhooks.GetSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.GetWebhookSubscriptionResponse>;
    /**
     * Updates a webhook subscription.
     *
     * @param {Square.webhooks.UpdateWebhookSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.update({
     *         subscriptionId: "subscription_id",
     *         subscription: {
     *             name: "Updated Example Webhook Subscription",
     *             enabled: false
     *         }
     *     })
     */
    update(request: Square.webhooks.UpdateWebhookSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.UpdateWebhookSubscriptionResponse>;
    /**
     * Deletes a webhook subscription.
     *
     * @param {Square.webhooks.DeleteSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.delete({
     *         subscriptionId: "subscription_id"
     *     })
     */
    delete(request: Square.webhooks.DeleteSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.DeleteWebhookSubscriptionResponse>;
    /**
     * Updates a webhook subscription by replacing the existing signature key with a new one.
     *
     * @param {Square.webhooks.UpdateWebhookSubscriptionSignatureKeyRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.updateSignatureKey({
     *         subscriptionId: "subscription_id",
     *         idempotencyKey: "ed80ae6b-0654-473b-bbab-a39aee89a60d"
     *     })
     */
    updateSignatureKey(request: Square.webhooks.UpdateWebhookSubscriptionSignatureKeyRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.UpdateWebhookSubscriptionSignatureKeyResponse>;
    /**
     * Tests a webhook subscription by sending a test event to the notification URL.
     *
     * @param {Square.webhooks.TestWebhookSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.webhooks.subscriptions.test({
     *         subscriptionId: "subscription_id",
     *         eventType: "payment.created"
     *     })
     */
    test(request: Square.webhooks.TestWebhookSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.TestWebhookSubscriptionResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
