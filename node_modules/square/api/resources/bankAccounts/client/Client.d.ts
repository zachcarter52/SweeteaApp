/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace BankAccounts {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class BankAccounts {
    protected readonly _options: BankAccounts.Options;
    constructor(_options?: BankAccounts.Options);
    /**
     * Returns a list of [BankAccount](entity:BankAccount) objects linked to a Square account.
     *
     * @param {Square.ListBankAccountsRequest} request
     * @param {BankAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bankAccounts.list()
     */
    list(request?: Square.ListBankAccountsRequest, requestOptions?: BankAccounts.RequestOptions): Promise<core.Page<Square.BankAccount>>;
    /**
     * Returns details of a [BankAccount](entity:BankAccount) identified by V1 bank account ID.
     *
     * @param {Square.GetByV1IdBankAccountsRequest} request
     * @param {BankAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bankAccounts.getByV1Id({
     *         v1BankAccountId: "v1_bank_account_id"
     *     })
     */
    getByV1Id(request: Square.GetByV1IdBankAccountsRequest, requestOptions?: BankAccounts.RequestOptions): Promise<Square.GetBankAccountByV1IdResponse>;
    /**
     * Returns details of a [BankAccount](entity:BankAccount)
     * linked to a Square account.
     *
     * @param {Square.GetBankAccountsRequest} request
     * @param {BankAccounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bankAccounts.get({
     *         bankAccountId: "bank_account_id"
     *     })
     */
    get(request: Square.GetBankAccountsRequest, requestOptions?: BankAccounts.RequestOptions): Promise<Square.GetBankAccountResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
