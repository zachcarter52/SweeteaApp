/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Mobile {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Mobile {
    protected readonly _options: Mobile.Options;
    constructor(_options?: Mobile.Options);
    /**
     * __Note:__ This endpoint is used by the deprecated Reader SDK.
     * Developers should update their integration to use the [Mobile Payments SDK](https://developer.squareup.com/docs/mobile-payments-sdk), which includes its own authorization methods.
     *
     * Generates code to authorize a mobile application to connect to a Square card reader.
     *
     * Authorization codes are one-time-use codes and expire 60 minutes after being issued.
     *
     * The `Authorization` header you provide to this endpoint must have the following format:
     *
     * ```
     * Authorization: Bearer ACCESS_TOKEN
     * ```
     *
     * Replace `ACCESS_TOKEN` with a
     * [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
     *
     * @param {Square.CreateMobileAuthorizationCodeRequest} request
     * @param {Mobile.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.mobile.authorizationCode({
     *         locationId: "YOUR_LOCATION_ID"
     *     })
     */
    authorizationCode(request?: Square.CreateMobileAuthorizationCodeRequest, requestOptions?: Mobile.RequestOptions): Promise<Square.CreateMobileAuthorizationCodeResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
