/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Segments {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Segments {
    protected readonly _options: Segments.Options;
    constructor(_options?: Segments.Options);
    /**
     * Retrieves the list of customer segments of a business.
     *
     * @param {Square.customers.ListSegmentsRequest} request
     * @param {Segments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.segments.list()
     */
    list(request?: Square.customers.ListSegmentsRequest, requestOptions?: Segments.RequestOptions): Promise<core.Page<Square.CustomerSegment>>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     *
     * @param {Square.customers.GetSegmentsRequest} request
     * @param {Segments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.segments.get({
     *         segmentId: "segment_id"
     *     })
     */
    get(request: Square.customers.GetSegmentsRequest, requestOptions?: Segments.RequestOptions): Promise<Square.GetCustomerSegmentResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
