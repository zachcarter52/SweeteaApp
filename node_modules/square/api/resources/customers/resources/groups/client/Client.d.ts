/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Groups {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Groups {
    protected readonly _options: Groups.Options;
    constructor(_options?: Groups.Options);
    /**
     * Retrieves the list of customer groups of a business.
     *
     * @param {Square.customers.ListGroupsRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.list()
     */
    list(request?: Square.customers.ListGroupsRequest, requestOptions?: Groups.RequestOptions): Promise<core.Page<Square.CustomerGroup>>;
    /**
     * Creates a new customer group for a business.
     *
     * The request must include the `name` value of the group.
     *
     * @param {Square.customers.CreateCustomerGroupRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.create({
     *         group: {
     *             name: "Loyal Customers"
     *         }
     *     })
     */
    create(request: Square.customers.CreateCustomerGroupRequest, requestOptions?: Groups.RequestOptions): Promise<Square.CreateCustomerGroupResponse>;
    /**
     * Retrieves a specific customer group as identified by the `group_id` value.
     *
     * @param {Square.customers.GetGroupsRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.get({
     *         groupId: "group_id"
     *     })
     */
    get(request: Square.customers.GetGroupsRequest, requestOptions?: Groups.RequestOptions): Promise<Square.GetCustomerGroupResponse>;
    /**
     * Updates a customer group as identified by the `group_id` value.
     *
     * @param {Square.customers.UpdateCustomerGroupRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.update({
     *         groupId: "group_id",
     *         group: {
     *             name: "Loyal Customers"
     *         }
     *     })
     */
    update(request: Square.customers.UpdateCustomerGroupRequest, requestOptions?: Groups.RequestOptions): Promise<Square.UpdateCustomerGroupResponse>;
    /**
     * Deletes a customer group as identified by the `group_id` value.
     *
     * @param {Square.customers.DeleteGroupsRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.delete({
     *         groupId: "group_id"
     *     })
     */
    delete(request: Square.customers.DeleteGroupsRequest, requestOptions?: Groups.RequestOptions): Promise<Square.DeleteCustomerGroupResponse>;
    /**
     * Adds a group membership to a customer.
     *
     * The customer is identified by the `customer_id` value
     * and the customer group is identified by the `group_id` value.
     *
     * @param {Square.customers.AddGroupsRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.add({
     *         customerId: "customer_id",
     *         groupId: "group_id"
     *     })
     */
    add(request: Square.customers.AddGroupsRequest, requestOptions?: Groups.RequestOptions): Promise<Square.AddGroupToCustomerResponse>;
    /**
     * Removes a group membership from a customer.
     *
     * The customer is identified by the `customer_id` value
     * and the customer group is identified by the `group_id` value.
     *
     * @param {Square.customers.RemoveGroupsRequest} request
     * @param {Groups.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.groups.remove({
     *         customerId: "customer_id",
     *         groupId: "group_id"
     *     })
     */
    remove(request: Square.customers.RemoveGroupsRequest, requestOptions?: Groups.RequestOptions): Promise<Square.RemoveGroupFromCustomerResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
