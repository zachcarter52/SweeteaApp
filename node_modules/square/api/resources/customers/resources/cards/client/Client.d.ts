/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Cards {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Cards {
    protected readonly _options: Cards.Options;
    constructor(_options?: Cards.Options);
    /**
     * Adds a card on file to an existing customer.
     *
     * As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
     * calls with the same card nonce return the same card record that was created
     * with the provided nonce during the _first_ call.
     *
     * @param {Square.customers.CreateCustomerCardRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.cards.create({
     *         customerId: "customer_id",
     *         cardNonce: "YOUR_CARD_NONCE",
     *         billingAddress: {
     *             addressLine1: "500 Electric Ave",
     *             addressLine2: "Suite 600",
     *             locality: "New York",
     *             administrativeDistrictLevel1: "NY",
     *             postalCode: "10003",
     *             country: "US"
     *         },
     *         cardholderName: "Amelia Earhart"
     *     })
     */
    create(request: Square.customers.CreateCustomerCardRequest, requestOptions?: Cards.RequestOptions): Promise<Square.CreateCustomerCardResponse>;
    /**
     * Removes a card on file from a customer.
     *
     * @param {Square.customers.DeleteCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.cards.delete({
     *         customerId: "customer_id",
     *         cardId: "card_id"
     *     })
     */
    delete(request: Square.customers.DeleteCardsRequest, requestOptions?: Cards.RequestOptions): Promise<Square.DeleteCustomerCardResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
