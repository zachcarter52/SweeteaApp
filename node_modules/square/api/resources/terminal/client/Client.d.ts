/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { Actions } from "../resources/actions/client/Client";
import { Checkouts } from "../resources/checkouts/client/Client";
import { Refunds } from "../resources/refunds/client/Client";
export declare namespace Terminal {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Terminal {
    protected readonly _options: Terminal.Options;
    protected _actions: Actions | undefined;
    protected _checkouts: Checkouts | undefined;
    protected _refunds: Refunds | undefined;
    constructor(_options?: Terminal.Options);
    get actions(): Actions;
    get checkouts(): Checkouts;
    get refunds(): Refunds;
    /**
     * Dismisses a Terminal action request if the status and type of the request permits it.
     *
     * See [Link and Dismiss Actions](https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions) for more details.
     *
     * @param {Square.DismissTerminalActionRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalAction({
     *         actionId: "action_id"
     *     })
     */
    dismissTerminalAction(request: Square.DismissTerminalActionRequest, requestOptions?: Terminal.RequestOptions): Promise<Square.DismissTerminalActionResponse>;
    /**
     * Dismisses a Terminal checkout request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalCheckoutRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalCheckout({
     *         checkoutId: "checkout_id"
     *     })
     */
    dismissTerminalCheckout(request: Square.DismissTerminalCheckoutRequest, requestOptions?: Terminal.RequestOptions): Promise<Square.DismissTerminalCheckoutResponse>;
    /**
     * Dismisses a Terminal refund request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalRefundRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalRefund({
     *         terminalRefundId: "terminal_refund_id"
     *     })
     */
    dismissTerminalRefund(request: Square.DismissTerminalRefundRequest, requestOptions?: Terminal.RequestOptions): Promise<Square.DismissTerminalRefundResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
