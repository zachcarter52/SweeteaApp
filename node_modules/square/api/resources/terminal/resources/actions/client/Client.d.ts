/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Actions {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Actions {
    protected readonly _options: Actions.Options;
    constructor(_options?: Actions.Options);
    /**
     * Creates a Terminal action request and sends it to the specified device.
     *
     * @param {Square.terminal.CreateTerminalActionRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.actions.create({
     *         idempotencyKey: "thahn-70e75c10-47f7-4ab6-88cc-aaa4076d065e",
     *         action: {
     *             deviceId: "{{DEVICE_ID}}",
     *             deadlineDuration: "PT5M",
     *             type: "SAVE_CARD",
     *             saveCardOptions: {
     *                 customerId: "{{CUSTOMER_ID}}",
     *                 referenceId: "user-id-1"
     *             }
     *         }
     *     })
     */
    create(request: Square.terminal.CreateTerminalActionRequest, requestOptions?: Actions.RequestOptions): Promise<Square.CreateTerminalActionResponse>;
    /**
     * Retrieves a filtered list of Terminal action requests created by the account making the request. Terminal action requests are available for 30 days.
     *
     * @param {Square.terminal.SearchTerminalActionsRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.actions.search({
     *         query: {
     *             filter: {
     *                 createdAt: {
     *                     startAt: "2022-04-01T00:00:00.000Z"
     *                 }
     *             },
     *             sort: {
     *                 sortOrder: "DESC"
     *             }
     *         },
     *         limit: 2
     *     })
     */
    search(request?: Square.terminal.SearchTerminalActionsRequest, requestOptions?: Actions.RequestOptions): Promise<Square.SearchTerminalActionsResponse>;
    /**
     * Retrieves a Terminal action request by `action_id`. Terminal action requests are available for 30 days.
     *
     * @param {Square.terminal.GetActionsRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.actions.get({
     *         actionId: "action_id"
     *     })
     */
    get(request: Square.terminal.GetActionsRequest, requestOptions?: Actions.RequestOptions): Promise<Square.GetTerminalActionResponse>;
    /**
     * Cancels a Terminal action request if the status of the request permits it.
     *
     * @param {Square.terminal.CancelActionsRequest} request
     * @param {Actions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.actions.cancel({
     *         actionId: "action_id"
     *     })
     */
    cancel(request: Square.terminal.CancelActionsRequest, requestOptions?: Actions.RequestOptions): Promise<Square.CancelTerminalActionResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
