/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Inventory {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Inventory {
    protected readonly _options: Inventory.Options;
    constructor(_options?: Inventory.Options);
    /**
     * Deprecated version of [RetrieveInventoryAdjustment](api-endpoint:Inventory-RetrieveInventoryAdjustment) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.DeprecatedGetAdjustmentInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedGetAdjustment({
     *         adjustmentId: "adjustment_id"
     *     })
     */
    deprecatedGetAdjustment(request: Square.DeprecatedGetAdjustmentInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.GetInventoryAdjustmentResponse>;
    /**
     * Returns the [InventoryAdjustment](entity:InventoryAdjustment) object
     * with the provided `adjustment_id`.
     *
     * @param {Square.GetAdjustmentInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getAdjustment({
     *         adjustmentId: "adjustment_id"
     *     })
     */
    getAdjustment(request: Square.GetAdjustmentInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.GetInventoryAdjustmentResponse>;
    /**
     * Deprecated version of [BatchChangeInventory](api-endpoint:Inventory-BatchChangeInventory) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchChangeInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchChange({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         changes: [{
     *                 type: "PHYSICAL_COUNT",
     *                 physicalCount: {
     *                     referenceId: "1536bfbf-efed-48bf-b17d-a197141b2a92",
     *                     catalogObjectId: "W62UWFY35CWMYGVWK6TWJDNI",
     *                     state: "IN_STOCK",
     *                     locationId: "C6W5YS5QM06F5",
     *                     quantity: "53",
     *                     teamMemberId: "LRK57NSQ5X7PUD05",
     *                     occurredAt: "2016-11-16T22:25:24.878Z"
     *                 }
     *             }],
     *         ignoreUnchangedCounts: true
     *     })
     */
    deprecatedBatchChange(request: Square.BatchChangeInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.BatchChangeInventoryResponse>;
    /**
     * Deprecated version of [BatchRetrieveInventoryChanges](api-endpoint:Inventory-BatchRetrieveInventoryChanges) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchRetrieveInventoryChangesRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchGetChanges({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["C6W5YS5QM06F5"],
     *         types: ["PHYSICAL_COUNT"],
     *         states: ["IN_STOCK"],
     *         updatedAfter: "2016-11-01T00:00:00.000Z",
     *         updatedBefore: "2016-12-01T00:00:00.000Z"
     *     })
     */
    deprecatedBatchGetChanges(request: Square.BatchRetrieveInventoryChangesRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.BatchGetInventoryChangesResponse>;
    /**
     * Deprecated version of [BatchRetrieveInventoryCounts](api-endpoint:Inventory-BatchRetrieveInventoryCounts) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.BatchGetInventoryCountsRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedBatchGetCounts({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["59TNP9SA8VGDA"],
     *         updatedAfter: "2016-11-16T00:00:00.000Z"
     *     })
     */
    deprecatedBatchGetCounts(request: Square.BatchGetInventoryCountsRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.BatchGetInventoryCountsResponse>;
    /**
     * Applies adjustments and counts to the provided item quantities.
     *
     * On success: returns the current calculated counts for all objects
     * referenced in the request.
     * On failure: returns a list of related errors.
     *
     * @param {Square.BatchChangeInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchCreateChanges({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         changes: [{
     *                 type: "PHYSICAL_COUNT",
     *                 physicalCount: {
     *                     referenceId: "1536bfbf-efed-48bf-b17d-a197141b2a92",
     *                     catalogObjectId: "W62UWFY35CWMYGVWK6TWJDNI",
     *                     state: "IN_STOCK",
     *                     locationId: "C6W5YS5QM06F5",
     *                     quantity: "53",
     *                     teamMemberId: "LRK57NSQ5X7PUD05",
     *                     occurredAt: "2016-11-16T22:25:24.878Z"
     *                 }
     *             }],
     *         ignoreUnchangedCounts: true
     *     })
     */
    batchCreateChanges(request: Square.BatchChangeInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.BatchChangeInventoryResponse>;
    /**
     * Returns historical physical counts and adjustments based on the
     * provided filter criteria.
     *
     * Results are paginated and sorted in ascending order according their
     * `occurred_at` timestamp (oldest first).
     *
     * BatchRetrieveInventoryChanges is a catch-all query endpoint for queries
     * that cannot be handled by other, simpler endpoints.
     *
     * @param {Square.BatchRetrieveInventoryChangesRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchGetChanges({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["C6W5YS5QM06F5"],
     *         types: ["PHYSICAL_COUNT"],
     *         states: ["IN_STOCK"],
     *         updatedAfter: "2016-11-01T00:00:00.000Z",
     *         updatedBefore: "2016-12-01T00:00:00.000Z"
     *     })
     */
    batchGetChanges(request: Square.BatchRetrieveInventoryChangesRequest, requestOptions?: Inventory.RequestOptions): Promise<core.Page<Square.InventoryChange>>;
    /**
     * Returns current counts for the provided
     * [CatalogObject](entity:CatalogObject)s at the requested
     * [Location](entity:Location)s.
     *
     * Results are paginated and sorted in descending order according to their
     * `calculated_at` timestamp (newest first).
     *
     * When `updated_after` is specified, only counts that have changed since that
     * time (based on the server timestamp for the most recent change) are
     * returned. This allows clients to perform a "sync" operation, for example
     * in response to receiving a Webhook notification.
     *
     * @param {Square.BatchGetInventoryCountsRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.batchGetCounts({
     *         catalogObjectIds: ["W62UWFY35CWMYGVWK6TWJDNI"],
     *         locationIds: ["59TNP9SA8VGDA"],
     *         updatedAfter: "2016-11-16T00:00:00.000Z"
     *     })
     */
    batchGetCounts(request: Square.BatchGetInventoryCountsRequest, requestOptions?: Inventory.RequestOptions): Promise<core.Page<Square.InventoryCount>>;
    /**
     * Deprecated version of [RetrieveInventoryPhysicalCount](api-endpoint:Inventory-RetrieveInventoryPhysicalCount) after the endpoint URL
     * is updated to conform to the standard convention.
     *
     * @param {Square.DeprecatedGetPhysicalCountInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.deprecatedGetPhysicalCount({
     *         physicalCountId: "physical_count_id"
     *     })
     */
    deprecatedGetPhysicalCount(request: Square.DeprecatedGetPhysicalCountInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.GetInventoryPhysicalCountResponse>;
    /**
     * Returns the [InventoryPhysicalCount](entity:InventoryPhysicalCount)
     * object with the provided `physical_count_id`.
     *
     * @param {Square.GetPhysicalCountInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getPhysicalCount({
     *         physicalCountId: "physical_count_id"
     *     })
     */
    getPhysicalCount(request: Square.GetPhysicalCountInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.GetInventoryPhysicalCountResponse>;
    /**
     * Returns the [InventoryTransfer](entity:InventoryTransfer) object
     * with the provided `transfer_id`.
     *
     * @param {Square.GetTransferInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.getTransfer({
     *         transferId: "transfer_id"
     *     })
     */
    getTransfer(request: Square.GetTransferInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<Square.GetInventoryTransferResponse>;
    /**
     * Retrieves the current calculated stock count for a given
     * [CatalogObject](entity:CatalogObject) at a given set of
     * [Location](entity:Location)s. Responses are paginated and unsorted.
     * For more sophisticated queries, use a batch endpoint.
     *
     * @param {Square.GetInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.get({
     *         catalogObjectId: "catalog_object_id"
     *     })
     */
    get(request: Square.GetInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<core.Page<Square.InventoryCount>>;
    /**
     * Returns a set of physical counts and inventory adjustments for the
     * provided [CatalogObject](entity:CatalogObject) at the requested
     * [Location](entity:Location)s.
     *
     * You can achieve the same result by calling [BatchRetrieveInventoryChanges](api-endpoint:Inventory-BatchRetrieveInventoryChanges)
     * and having the `catalog_object_ids` list contain a single element of the `CatalogObject` ID.
     *
     * Results are paginated and sorted in descending order according to their
     * `occurred_at` timestamp (newest first).
     *
     * There are no limits on how far back the caller can page. This endpoint can be
     * used to display recent changes for a specific item. For more
     * sophisticated queries, use a batch endpoint.
     *
     * @param {Square.ChangesInventoryRequest} request
     * @param {Inventory.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inventory.changes({
     *         catalogObjectId: "catalog_object_id"
     *     })
     */
    changes(request: Square.ChangesInventoryRequest, requestOptions?: Inventory.RequestOptions): Promise<core.Page<Square.InventoryChange>>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
