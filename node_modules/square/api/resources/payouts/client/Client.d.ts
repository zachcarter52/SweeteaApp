/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Payouts {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Payouts {
    protected readonly _options: Payouts.Options;
    constructor(_options?: Payouts.Options);
    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.ListPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.list()
     */
    list(request?: Square.ListPayoutsRequest, requestOptions?: Payouts.RequestOptions): Promise<core.Page<Square.Payout>>;
    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.GetPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.get({
     *         payoutId: "payout_id"
     *     })
     */
    get(request: Square.GetPayoutsRequest, requestOptions?: Payouts.RequestOptions): Promise<Square.GetPayoutResponse>;
    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.ListEntriesPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.listEntries({
     *         payoutId: "payout_id"
     *     })
     */
    listEntries(request: Square.ListEntriesPayoutsRequest, requestOptions?: Payouts.RequestOptions): Promise<core.Page<Square.PayoutEntry>>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
