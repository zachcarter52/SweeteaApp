/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { Codes } from "../resources/codes/client/Client";
export declare namespace Devices {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Devices {
    protected readonly _options: Devices.Options;
    protected _codes: Codes | undefined;
    constructor(_options?: Devices.Options);
    get codes(): Codes;
    /**
     * List devices associated with the merchant. Currently, only Terminal API
     * devices are supported.
     *
     * @param {Square.ListDevicesRequest} request
     * @param {Devices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.list()
     */
    list(request?: Square.ListDevicesRequest, requestOptions?: Devices.RequestOptions): Promise<core.Page<Square.Device>>;
    /**
     * Retrieves Device with the associated `device_id`.
     *
     * @param {Square.GetDevicesRequest} request
     * @param {Devices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.get({
     *         deviceId: "device_id"
     *     })
     */
    get(request: Square.GetDevicesRequest, requestOptions?: Devices.RequestOptions): Promise<Square.GetDeviceResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
