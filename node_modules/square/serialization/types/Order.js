"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = void 0;
const core = __importStar(require("../../core"));
const OrderSource_1 = require("./OrderSource");
const OrderLineItem_1 = require("./OrderLineItem");
const OrderLineItemTax_1 = require("./OrderLineItemTax");
const OrderLineItemDiscount_1 = require("./OrderLineItemDiscount");
const OrderServiceCharge_1 = require("./OrderServiceCharge");
const Fulfillment_1 = require("./Fulfillment");
const OrderReturn_1 = require("./OrderReturn");
const OrderMoneyAmounts_1 = require("./OrderMoneyAmounts");
const OrderRoundingAdjustment_1 = require("./OrderRoundingAdjustment");
const Tender_1 = require("./Tender");
const Refund_1 = require("./Refund");
const OrderState_1 = require("./OrderState");
const Money_1 = require("./Money");
const OrderPricingOptions_1 = require("./OrderPricingOptions");
const OrderReward_1 = require("./OrderReward");
exports.Order = core.serialization.object({
    id: core.serialization.string().optional(),
    locationId: core.serialization.property("location_id", core.serialization.string()),
    referenceId: core.serialization.property("reference_id", core.serialization.string().optionalNullable()),
    source: OrderSource_1.OrderSource.optional(),
    customerId: core.serialization.property("customer_id", core.serialization.string().optionalNullable()),
    lineItems: core.serialization.property("line_items", core.serialization.list(OrderLineItem_1.OrderLineItem).optionalNullable()),
    taxes: core.serialization.list(OrderLineItemTax_1.OrderLineItemTax).optionalNullable(),
    discounts: core.serialization.list(OrderLineItemDiscount_1.OrderLineItemDiscount).optionalNullable(),
    serviceCharges: core.serialization.property("service_charges", core.serialization.list(OrderServiceCharge_1.OrderServiceCharge).optionalNullable()),
    fulfillments: core.serialization.list(Fulfillment_1.Fulfillment).optionalNullable(),
    returns: core.serialization.list(OrderReturn_1.OrderReturn).optional(),
    returnAmounts: core.serialization.property("return_amounts", OrderMoneyAmounts_1.OrderMoneyAmounts.optional()),
    netAmounts: core.serialization.property("net_amounts", OrderMoneyAmounts_1.OrderMoneyAmounts.optional()),
    roundingAdjustment: core.serialization.property("rounding_adjustment", OrderRoundingAdjustment_1.OrderRoundingAdjustment.optional()),
    tenders: core.serialization.list(Tender_1.Tender).optional(),
    refunds: core.serialization.list(Refund_1.Refund).optional(),
    metadata: core.serialization
        .record(core.serialization.string(), core.serialization.string().optionalNullable())
        .optionalNullable(),
    createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string().optional()),
    closedAt: core.serialization.property("closed_at", core.serialization.string().optional()),
    state: OrderState_1.OrderState.optional(),
    version: core.serialization.number().optional(),
    totalMoney: core.serialization.property("total_money", Money_1.Money.optional()),
    totalTaxMoney: core.serialization.property("total_tax_money", Money_1.Money.optional()),
    totalDiscountMoney: core.serialization.property("total_discount_money", Money_1.Money.optional()),
    totalTipMoney: core.serialization.property("total_tip_money", Money_1.Money.optional()),
    totalServiceChargeMoney: core.serialization.property("total_service_charge_money", Money_1.Money.optional()),
    ticketName: core.serialization.property("ticket_name", core.serialization.string().optionalNullable()),
    pricingOptions: core.serialization.property("pricing_options", OrderPricingOptions_1.OrderPricingOptions.optional()),
    rewards: core.serialization.list(OrderReward_1.OrderReward).optional(),
    netAmountDueMoney: core.serialization.property("net_amount_due_money", Money_1.Money.optional()),
});
