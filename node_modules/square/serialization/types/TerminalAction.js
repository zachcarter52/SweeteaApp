"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalAction = void 0;
const core = __importStar(require("../../core"));
const ActionCancelReason_1 = require("./ActionCancelReason");
const TerminalActionActionType_1 = require("./TerminalActionActionType");
const QrCodeOptions_1 = require("./QrCodeOptions");
const SaveCardOptions_1 = require("./SaveCardOptions");
const SignatureOptions_1 = require("./SignatureOptions");
const ConfirmationOptions_1 = require("./ConfirmationOptions");
const ReceiptOptions_1 = require("./ReceiptOptions");
const DataCollectionOptions_1 = require("./DataCollectionOptions");
const SelectOptions_1 = require("./SelectOptions");
const DeviceMetadata_1 = require("./DeviceMetadata");
exports.TerminalAction = core.serialization.object({
    id: core.serialization.string().optional(),
    deviceId: core.serialization.property("device_id", core.serialization.string().optionalNullable()),
    deadlineDuration: core.serialization.property("deadline_duration", core.serialization.string().optionalNullable()),
    status: core.serialization.string().optional(),
    cancelReason: core.serialization.property("cancel_reason", ActionCancelReason_1.ActionCancelReason.optional()),
    createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string().optional()),
    appId: core.serialization.property("app_id", core.serialization.string().optional()),
    locationId: core.serialization.property("location_id", core.serialization.string().optional()),
    type: TerminalActionActionType_1.TerminalActionActionType.optional(),
    qrCodeOptions: core.serialization.property("qr_code_options", QrCodeOptions_1.QrCodeOptions.optional()),
    saveCardOptions: core.serialization.property("save_card_options", SaveCardOptions_1.SaveCardOptions.optional()),
    signatureOptions: core.serialization.property("signature_options", SignatureOptions_1.SignatureOptions.optional()),
    confirmationOptions: core.serialization.property("confirmation_options", ConfirmationOptions_1.ConfirmationOptions.optional()),
    receiptOptions: core.serialization.property("receipt_options", ReceiptOptions_1.ReceiptOptions.optional()),
    dataCollectionOptions: core.serialization.property("data_collection_options", DataCollectionOptions_1.DataCollectionOptions.optional()),
    selectOptions: core.serialization.property("select_options", SelectOptions_1.SelectOptions.optional()),
    deviceMetadata: core.serialization.property("device_metadata", DeviceMetadata_1.DeviceMetadata.optional()),
    awaitNextAction: core.serialization.property("await_next_action", core.serialization.boolean().optionalNullable()),
    awaitNextActionDuration: core.serialization.property("await_next_action_duration", core.serialization.string().optionalNullable()),
});
