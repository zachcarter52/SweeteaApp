/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { PaymentLinks } from "../resources/paymentLinks/client/Client";
export declare namespace Checkout {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Checkout {
    protected readonly _options: Checkout.Options;
    protected _paymentLinks: PaymentLinks | undefined;
    constructor(_options?: Checkout.Options);
    get paymentLinks(): PaymentLinks;
    /**
     * Retrieves the location-level settings for a Square-hosted checkout page.
     *
     * @param {Square.RetrieveLocationSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.retrieveLocationSettings({
     *         locationId: "location_id"
     *     })
     */
    retrieveLocationSettings(request: Square.RetrieveLocationSettingsRequest, requestOptions?: Checkout.RequestOptions): Promise<Square.RetrieveLocationSettingsResponse>;
    /**
     * Updates the location-level settings for a Square-hosted checkout page.
     *
     * @param {Square.UpdateLocationSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.updateLocationSettings({
     *         locationId: "location_id",
     *         locationSettings: {}
     *     })
     */
    updateLocationSettings(request: Square.UpdateLocationSettingsRequest, requestOptions?: Checkout.RequestOptions): Promise<Square.UpdateLocationSettingsResponse>;
    /**
     * Retrieves the merchant-level settings for a Square-hosted checkout page.
     *
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.retrieveMerchantSettings()
     */
    retrieveMerchantSettings(requestOptions?: Checkout.RequestOptions): Promise<Square.RetrieveMerchantSettingsResponse>;
    /**
     * Updates the merchant-level settings for a Square-hosted checkout page.
     *
     * @param {Square.UpdateMerchantSettingsRequest} request
     * @param {Checkout.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.updateMerchantSettings({
     *         merchantSettings: {}
     *     })
     */
    updateMerchantSettings(request: Square.UpdateMerchantSettingsRequest, requestOptions?: Checkout.RequestOptions): Promise<Square.UpdateMerchantSettingsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
