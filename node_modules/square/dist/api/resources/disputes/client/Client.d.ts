/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
import { Evidence } from "../resources/evidence/client/Client";
export declare namespace Disputes {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Disputes {
    protected readonly _options: Disputes.Options;
    protected _evidence: Evidence | undefined;
    constructor(_options?: Disputes.Options);
    get evidence(): Evidence;
    /**
     * Returns a list of disputes associated with a particular account.
     *
     * @param {Square.ListDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.list()
     */
    list(request?: Square.ListDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<core.Page<Square.Dispute>>;
    /**
     * Returns details about a specific dispute.
     *
     * @param {Square.GetDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.get({
     *         disputeId: "dispute_id"
     *     })
     */
    get(request: Square.GetDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<Square.GetDisputeResponse>;
    /**
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
     * updates the dispute state to ACCEPTED.
     *
     * Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
     * does not have sufficient funds, Square debits the associated bank account.
     *
     * @param {Square.AcceptDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.accept({
     *         disputeId: "dispute_id"
     *     })
     */
    accept(request: Square.AcceptDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<Square.AcceptDisputeResponse>;
    /**
     * Uploads a file to use as evidence in a dispute challenge. The endpoint accepts HTTP
     * multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG, and TIFF formats.
     *
     * @param {Square.CreateEvidenceFileDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.createEvidenceFile({
     *         disputeId: "dispute_id"
     *     })
     */
    createEvidenceFile(request: Square.CreateEvidenceFileDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<Square.CreateDisputeEvidenceFileResponse>;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     *
     * @param {Square.CreateDisputeEvidenceTextRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.createEvidenceText({
     *         disputeId: "dispute_id",
     *         idempotencyKey: "ed3ee3933d946f1514d505d173c82648",
     *         evidenceType: "TRACKING_NUMBER",
     *         evidenceText: "1Z8888888888888888"
     *     })
     */
    createEvidenceText(request: Square.CreateDisputeEvidenceTextRequest, requestOptions?: Disputes.RequestOptions): Promise<Square.CreateDisputeEvidenceTextResponse>;
    /**
     * Submits evidence to the cardholder's bank.
     *
     * The evidence submitted by this endpoint includes evidence uploaded
     * using the [CreateDisputeEvidenceFile](api-endpoint:Disputes-CreateDisputeEvidenceFile) and
     * [CreateDisputeEvidenceText](api-endpoint:Disputes-CreateDisputeEvidenceText) endpoints and
     * evidence automatically provided by Square, when available. Evidence cannot be removed from
     * a dispute after submission.
     *
     * @param {Square.SubmitEvidenceDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.submitEvidence({
     *         disputeId: "dispute_id"
     *     })
     */
    submitEvidence(request: Square.SubmitEvidenceDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<Square.SubmitEvidenceResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
