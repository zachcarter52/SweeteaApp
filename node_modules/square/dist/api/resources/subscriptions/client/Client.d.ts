/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Subscriptions {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Subscriptions {
    protected readonly _options: Subscriptions.Options;
    constructor(_options?: Subscriptions.Options);
    /**
     * Enrolls a customer in a subscription.
     *
     * If you provide a card on file in the request, Square charges the card for
     * the subscription. Otherwise, Square sends an invoice to the customer's email
     * address. The subscription starts immediately, unless the request includes
     * the optional `start_date`. Each individual subscription is associated with a particular location.
     *
     * For more information, see [Create a subscription](https://developer.squareup.com/docs/subscriptions-api/manage-subscriptions#create-a-subscription).
     *
     * @param {Square.CreateSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.create({
     *         idempotencyKey: "8193148c-9586-11e6-99f9-28cfe92138cf",
     *         locationId: "S8GWD5R9QB376",
     *         planVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
     *         customerId: "CHFGVKYY8RSV93M5KCYTG4PN0G",
     *         startDate: "2023-06-20",
     *         cardId: "ccof:qy5x8hHGYsgLrp4Q4GB",
     *         timezone: "America/Los_Angeles",
     *         source: {
     *             name: "My Application"
     *         },
     *         phases: [{
     *                 ordinal: 0,
     *                 orderTemplateId: "U2NaowWxzXwpsZU697x7ZHOAnCNZY"
     *             }]
     *     })
     */
    create(request: Square.CreateSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.CreateSubscriptionResponse>;
    /**
     * Schedules a plan variation change for all active subscriptions under a given plan
     * variation. For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
     *
     * @param {Square.BulkSwapPlanRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.bulkSwapPlan({
     *         newPlanVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
     *         oldPlanVariationId: "6JHXF3B2CW3YKHDV4XEM674H",
     *         locationId: "S8GWD5R9QB376"
     *     })
     */
    bulkSwapPlan(request: Square.BulkSwapPlanRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.BulkSwapPlanResponse>;
    /**
     * Searches for subscriptions.
     *
     * Results are ordered chronologically by subscription creation date. If
     * the request specifies more than one location ID,
     * the endpoint orders the result
     * by location ID, and then by creation date within each location. If no locations are given
     * in the query, all locations are searched.
     *
     * You can also optionally specify `customer_ids` to search by customer.
     * If left unset, all customers
     * associated with the specified locations are returned.
     * If the request specifies customer IDs, the endpoint orders results
     * first by location, within location by customer ID, and within
     * customer by subscription creation date.
     *
     * @param {Square.SearchSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.search({
     *         query: {
     *             filter: {
     *                 customerIds: ["CHFGVKYY8RSV93M5KCYTG4PN0G"],
     *                 locationIds: ["S8GWD5R9QB376"],
     *                 sourceNames: ["My App"]
     *             }
     *         }
     *     })
     */
    search(request?: Square.SearchSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.SearchSubscriptionsResponse>;
    /**
     * Retrieves a specific subscription.
     *
     * @param {Square.GetSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.get({
     *         subscriptionId: "subscription_id"
     *     })
     */
    get(request: Square.GetSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.GetSubscriptionResponse>;
    /**
     * Updates a subscription by modifying or clearing `subscription` field values.
     * To clear a field, set its value to `null`.
     *
     * @param {Square.UpdateSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.update({
     *         subscriptionId: "subscription_id",
     *         subscription: {
     *             cardId: "{NEW CARD ID}"
     *         }
     *     })
     */
    update(request: Square.UpdateSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.UpdateSubscriptionResponse>;
    /**
     * Deletes a scheduled action for a subscription.
     *
     * @param {Square.DeleteActionSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.deleteAction({
     *         subscriptionId: "subscription_id",
     *         actionId: "action_id"
     *     })
     */
    deleteAction(request: Square.DeleteActionSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.DeleteSubscriptionActionResponse>;
    /**
     * Changes the [billing anchor date](https://developer.squareup.com/docs/subscriptions-api/subscription-billing#billing-dates)
     * for a subscription.
     *
     * @param {Square.ChangeBillingAnchorDateRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.changeBillingAnchorDate({
     *         subscriptionId: "subscription_id",
     *         monthlyBillingAnchorDate: 1
     *     })
     */
    changeBillingAnchorDate(request: Square.ChangeBillingAnchorDateRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.ChangeBillingAnchorDateResponse>;
    /**
     * Schedules a `CANCEL` action to cancel an active subscription. This
     * sets the `canceled_date` field to the end of the active billing period. After this date,
     * the subscription status changes from ACTIVE to CANCELED.
     *
     * @param {Square.CancelSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.cancel({
     *         subscriptionId: "subscription_id"
     *     })
     */
    cancel(request: Square.CancelSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.CancelSubscriptionResponse>;
    /**
     * Lists all [events](https://developer.squareup.com/docs/subscriptions-api/actions-events) for a specific subscription.
     *
     * @param {Square.ListEventsSubscriptionsRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.listEvents({
     *         subscriptionId: "subscription_id"
     *     })
     */
    listEvents(request: Square.ListEventsSubscriptionsRequest, requestOptions?: Subscriptions.RequestOptions): Promise<core.Page<Square.SubscriptionEvent>>;
    /**
     * Schedules a `PAUSE` action to pause an active subscription.
     *
     * @param {Square.PauseSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.pause({
     *         subscriptionId: "subscription_id"
     *     })
     */
    pause(request: Square.PauseSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.PauseSubscriptionResponse>;
    /**
     * Schedules a `RESUME` action to resume a paused or a deactivated subscription.
     *
     * @param {Square.ResumeSubscriptionRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.resume({
     *         subscriptionId: "subscription_id"
     *     })
     */
    resume(request: Square.ResumeSubscriptionRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.ResumeSubscriptionResponse>;
    /**
     * Schedules a `SWAP_PLAN` action to swap a subscription plan variation in an existing subscription.
     * For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
     *
     * @param {Square.SwapPlanRequest} request
     * @param {Subscriptions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.subscriptions.swapPlan({
     *         subscriptionId: "subscription_id",
     *         newPlanVariationId: "FQ7CDXXWSLUJRPM3GFJSJGZ7",
     *         phases: [{
     *                 ordinal: 0,
     *                 orderTemplateId: "uhhnjH9osVv3shUADwaC0b3hNxQZY"
     *             }]
     *     })
     */
    swapPlan(request: Square.SwapPlanRequest, requestOptions?: Subscriptions.RequestOptions): Promise<Square.SwapPlanResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
