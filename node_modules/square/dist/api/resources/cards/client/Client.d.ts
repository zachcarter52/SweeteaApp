/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Cards {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Cards {
    protected readonly _options: Cards.Options;
    constructor(_options?: Cards.Options);
    /**
     * Retrieves a list of cards owned by the account making the request.
     * A max of 25 cards will be returned.
     *
     * @param {Square.ListCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.list()
     */
    list(request?: Square.ListCardsRequest, requestOptions?: Cards.RequestOptions): Promise<core.Page<Square.Card>>;
    /**
     * Adds a card on file to an existing merchant.
     *
     * @param {Square.CreateCardRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.create({
     *         idempotencyKey: "4935a656-a929-4792-b97c-8848be85c27c",
     *         sourceId: "cnon:uIbfJXhXETSP197M3GB",
     *         card: {
     *             cardholderName: "Amelia Earhart",
     *             billingAddress: {
     *                 addressLine1: "500 Electric Ave",
     *                 addressLine2: "Suite 600",
     *                 locality: "New York",
     *                 administrativeDistrictLevel1: "NY",
     *                 postalCode: "10003",
     *                 country: "US"
     *             },
     *             customerId: "VDKXEEKPJN48QDG3BGGFAK05P8",
     *             referenceId: "user-id-1"
     *         }
     *     })
     */
    create(request: Square.CreateCardRequest, requestOptions?: Cards.RequestOptions): Promise<Square.CreateCardResponse>;
    /**
     * Retrieves details for a specific Card.
     *
     * @param {Square.GetCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.get({
     *         cardId: "card_id"
     *     })
     */
    get(request: Square.GetCardsRequest, requestOptions?: Cards.RequestOptions): Promise<Square.GetCardResponse>;
    /**
     * Disables the card, preventing any further updates or charges.
     * Disabling an already disabled card is allowed but has no effect.
     *
     * @param {Square.DisableCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.disable({
     *         cardId: "card_id"
     *     })
     */
    disable(request: Square.DisableCardsRequest, requestOptions?: Cards.RequestOptions): Promise<Square.DisableCardResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
