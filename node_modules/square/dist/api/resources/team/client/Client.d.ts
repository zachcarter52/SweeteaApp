/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Team {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Team {
    protected readonly _options: Team.Options;
    constructor(_options?: Team.Options);
    /**
     * Lists jobs in a seller account. Results are sorted by title in ascending order.
     *
     * @param {Square.ListJobsRequest} request
     * @param {Team.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.team.listJobs()
     */
    listJobs(request?: Square.ListJobsRequest, requestOptions?: Team.RequestOptions): Promise<Square.ListJobsResponse>;
    /**
     * Creates a job in a seller account. A job defines a title and tip eligibility. Note that
     * compensation is defined in a [job assignment](entity:JobAssignment) in a team member's wage setting.
     *
     * @param {Square.CreateJobRequest} request
     * @param {Team.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.team.createJob({
     *         job: {
     *             title: "Cashier",
     *             isTipEligible: true
     *         },
     *         idempotencyKey: "idempotency-key-0"
     *     })
     */
    createJob(request: Square.CreateJobRequest, requestOptions?: Team.RequestOptions): Promise<Square.CreateJobResponse>;
    /**
     * Retrieves a specified job.
     *
     * @param {Square.RetrieveJobRequest} request
     * @param {Team.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.team.retrieveJob({
     *         jobId: "job_id"
     *     })
     */
    retrieveJob(request: Square.RetrieveJobRequest, requestOptions?: Team.RequestOptions): Promise<Square.RetrieveJobResponse>;
    /**
     * Updates the title or tip eligibility of a job. Changes to the title propagate to all
     * `JobAssignment`, `Shift`, and `TeamMemberWage` objects that reference the job ID. Changes to
     * tip eligibility propagate to all `TeamMemberWage` objects that reference the job ID.
     *
     * @param {Square.UpdateJobRequest} request
     * @param {Team.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.team.updateJob({
     *         jobId: "job_id",
     *         job: {
     *             title: "Cashier 1",
     *             isTipEligible: true
     *         }
     *     })
     */
    updateJob(request: Square.UpdateJobRequest, requestOptions?: Team.RequestOptions): Promise<Square.UpdateJobResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
