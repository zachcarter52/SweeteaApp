/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Rewards {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Rewards {
    protected readonly _options: Rewards.Options;
    constructor(_options?: Rewards.Options);
    /**
     * Creates a loyalty reward. In the process, the endpoint does following:
     *
     * - Uses the `reward_tier_id` in the request to determine the number of points
     * to lock for this reward.
     * - If the request includes `order_id`, it adds the reward and related discount to the order.
     *
     * After a reward is created, the points are locked and
     * not available for the buyer to redeem another reward.
     *
     * @param {Square.loyalty.CreateLoyaltyRewardRequest} request
     * @param {Rewards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.rewards.create({
     *         reward: {
     *             loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
     *             rewardTierId: "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
     *             orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY"
     *         },
     *         idempotencyKey: "18c2e5ea-a620-4b1f-ad60-7b167285e451"
     *     })
     */
    create(request: Square.loyalty.CreateLoyaltyRewardRequest, requestOptions?: Rewards.RequestOptions): Promise<Square.CreateLoyaltyRewardResponse>;
    /**
     * Searches for loyalty rewards. This endpoint accepts a request with no query filters and returns results for all loyalty accounts.
     * If you include a `query` object, `loyalty_account_id` is required and `status` is  optional.
     *
     * If you know a reward ID, use the
     * [RetrieveLoyaltyReward](api-endpoint:Loyalty-RetrieveLoyaltyReward) endpoint.
     *
     * Search results are sorted by `updated_at` in descending order.
     *
     * @param {Square.loyalty.SearchLoyaltyRewardsRequest} request
     * @param {Rewards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.rewards.search({
     *         query: {
     *             loyaltyAccountId: "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd"
     *         },
     *         limit: 10
     *     })
     */
    search(request?: Square.loyalty.SearchLoyaltyRewardsRequest, requestOptions?: Rewards.RequestOptions): Promise<Square.SearchLoyaltyRewardsResponse>;
    /**
     * Retrieves a loyalty reward.
     *
     * @param {Square.loyalty.GetRewardsRequest} request
     * @param {Rewards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.rewards.get({
     *         rewardId: "reward_id"
     *     })
     */
    get(request: Square.loyalty.GetRewardsRequest, requestOptions?: Rewards.RequestOptions): Promise<Square.GetLoyaltyRewardResponse>;
    /**
     * Deletes a loyalty reward by doing the following:
     *
     * - Returns the loyalty points back to the loyalty account.
     * - If an order ID was specified when the reward was created
     * (see [CreateLoyaltyReward](api-endpoint:Loyalty-CreateLoyaltyReward)),
     * it updates the order by removing the reward and related
     * discounts.
     *
     * You cannot delete a reward that has reached the terminal state (REDEEMED).
     *
     * @param {Square.loyalty.DeleteRewardsRequest} request
     * @param {Rewards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.rewards.delete({
     *         rewardId: "reward_id"
     *     })
     */
    delete(request: Square.loyalty.DeleteRewardsRequest, requestOptions?: Rewards.RequestOptions): Promise<Square.DeleteLoyaltyRewardResponse>;
    /**
     * Redeems a loyalty reward.
     *
     * The endpoint sets the reward to the `REDEEMED` terminal state.
     *
     * If you are using your own order processing system (not using the
     * Orders API), you call this endpoint after the buyer paid for the
     * purchase.
     *
     * After the reward reaches the terminal state, it cannot be deleted.
     * In other words, points used for the reward cannot be returned
     * to the account.
     *
     * @param {Square.loyalty.RedeemLoyaltyRewardRequest} request
     * @param {Rewards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.rewards.redeem({
     *         rewardId: "reward_id",
     *         idempotencyKey: "98adc7f7-6963-473b-b29c-f3c9cdd7d994",
     *         locationId: "P034NEENMD09F"
     *     })
     */
    redeem(request: Square.loyalty.RedeemLoyaltyRewardRequest, requestOptions?: Rewards.RequestOptions): Promise<Square.RedeemLoyaltyRewardResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
