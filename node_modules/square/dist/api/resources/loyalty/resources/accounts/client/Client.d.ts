/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Accounts {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Accounts {
    protected readonly _options: Accounts.Options;
    constructor(_options?: Accounts.Options);
    /**
     * Creates a loyalty account. To create a loyalty account, you must provide the `program_id` and a `mapping` with the `phone_number` of the buyer.
     *
     * @param {Square.loyalty.CreateLoyaltyAccountRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.create({
     *         loyaltyAccount: {
     *             programId: "d619f755-2d17-41f3-990d-c04ecedd64dd",
     *             mapping: {
     *                 phoneNumber: "+14155551234"
     *             }
     *         },
     *         idempotencyKey: "ec78c477-b1c3-4899-a209-a4e71337c996"
     *     })
     */
    create(request: Square.loyalty.CreateLoyaltyAccountRequest, requestOptions?: Accounts.RequestOptions): Promise<Square.CreateLoyaltyAccountResponse>;
    /**
     * Searches for loyalty accounts in a loyalty program.
     *
     * You can search for a loyalty account using the phone number or customer ID associated with the account. To return all loyalty accounts, specify an empty `query` object or omit it entirely.
     *
     * Search results are sorted by `created_at` in ascending order.
     *
     * @param {Square.loyalty.SearchLoyaltyAccountsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.search({
     *         query: {
     *             mappings: [{
     *                     phoneNumber: "+14155551234"
     *                 }]
     *         },
     *         limit: 10
     *     })
     */
    search(request?: Square.loyalty.SearchLoyaltyAccountsRequest, requestOptions?: Accounts.RequestOptions): Promise<Square.SearchLoyaltyAccountsResponse>;
    /**
     * Retrieves a loyalty account.
     *
     * @param {Square.loyalty.GetAccountsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.get({
     *         accountId: "account_id"
     *     })
     */
    get(request: Square.loyalty.GetAccountsRequest, requestOptions?: Accounts.RequestOptions): Promise<Square.GetLoyaltyAccountResponse>;
    /**
     * Adds points earned from a purchase to a [loyalty account](entity:LoyaltyAccount).
     *
     * - If you are using the Orders API to manage orders, provide the `order_id`. Square reads the order
     * to compute the points earned from both the base loyalty program and an associated
     * [loyalty promotion](entity:LoyaltyPromotion). For purchases that qualify for multiple accrual
     * rules, Square computes points based on the accrual rule that grants the most points.
     * For purchases that qualify for multiple promotions, Square computes points based on the most
     * recently created promotion. A purchase must first qualify for program points to be eligible for promotion points.
     *
     * - If you are not using the Orders API to manage orders, provide `points` with the number of points to add.
     * You must first perform a client-side computation of the points earned from the loyalty program and
     * loyalty promotion. For spend-based and visit-based programs, you can call [CalculateLoyaltyPoints](api-endpoint:Loyalty-CalculateLoyaltyPoints)
     * to compute the points earned from the base loyalty program. For information about computing points earned from a loyalty promotion, see
     * [Calculating promotion points](https://developer.squareup.com/docs/loyalty-api/loyalty-promotions#calculate-promotion-points).
     *
     * @param {Square.loyalty.AccumulateLoyaltyPointsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.accumulatePoints({
     *         accountId: "account_id",
     *         accumulatePoints: {
     *             orderId: "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY"
     *         },
     *         idempotencyKey: "58b90739-c3e8-4b11-85f7-e636d48d72cb",
     *         locationId: "P034NEENMD09F"
     *     })
     */
    accumulatePoints(request: Square.loyalty.AccumulateLoyaltyPointsRequest, requestOptions?: Accounts.RequestOptions): Promise<Square.AccumulateLoyaltyPointsResponse>;
    /**
     * Adds points to or subtracts points from a buyer's account.
     *
     * Use this endpoint only when you need to manually adjust points. Otherwise, in your application flow, you call
     * [AccumulateLoyaltyPoints](api-endpoint:Loyalty-AccumulateLoyaltyPoints)
     * to add points when a buyer pays for the purchase.
     *
     * @param {Square.loyalty.AdjustLoyaltyPointsRequest} request
     * @param {Accounts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.accounts.adjust({
     *         accountId: "account_id",
     *         idempotencyKey: "bc29a517-3dc9-450e-aa76-fae39ee849d1",
     *         adjustPoints: {
     *             points: 10,
     *             reason: "Complimentary points"
     *         }
     *     })
     */
    adjust(request: Square.loyalty.AdjustLoyaltyPointsRequest, requestOptions?: Accounts.RequestOptions): Promise<Square.AdjustLoyaltyPointsResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
