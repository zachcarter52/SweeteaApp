/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Refunds {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Refunds {
    protected readonly _options: Refunds.Options;
    constructor(_options?: Refunds.Options);
    /**
     * Retrieves a list of refunds for the account making the request.
     *
     * Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.
     *
     * The maximum results per page is 100.
     *
     * @param {Square.ListRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.list()
     */
    list(request?: Square.ListRefundsRequest, requestOptions?: Refunds.RequestOptions): Promise<core.Page<Square.PaymentRefund>>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
     *
     * @param {Square.RefundPaymentRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.refundPayment({
     *         idempotencyKey: "9b7f2dcf-49da-4411-b23e-a2d6af21333a",
     *         amountMoney: {
     *             amount: 1000,
     *             currency: "USD"
     *         },
     *         appFeeMoney: {
     *             amount: 10,
     *             currency: "USD"
     *         },
     *         paymentId: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
     *         reason: "Example"
     *     })
     */
    refundPayment(request: Square.RefundPaymentRequest, requestOptions?: Refunds.RequestOptions): Promise<Square.RefundPaymentResponse>;
    /**
     * Retrieves a specific refund using the `refund_id`.
     *
     * @param {Square.GetRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.get({
     *         refundId: "refund_id"
     *     })
     */
    get(request: Square.GetRefundsRequest, requestOptions?: Refunds.RequestOptions): Promise<Square.GetPaymentRefundResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
