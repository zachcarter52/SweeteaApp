/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Activities {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Activities {
    protected readonly _options: Activities.Options;
    constructor(_options?: Activities.Options);
    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     *
     * @param {Square.giftCards.ListActivitiesRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.list()
     */
    list(request?: Square.giftCards.ListActivitiesRequest, requestOptions?: Activities.RequestOptions): Promise<core.Page<Square.GiftCardActivity>>;
    /**
     * Creates a gift card activity to manage the balance or state of a [gift card](entity:GiftCard).
     * For example, create an `ACTIVATE` activity to activate a gift card with an initial balance before first use.
     *
     * @param {Square.giftCards.CreateGiftCardActivityRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.create({
     *         idempotencyKey: "U16kfr-kA70er-q4Rsym-7U7NnY",
     *         giftCardActivity: {
     *             type: "ACTIVATE",
     *             locationId: "81FN9BNFZTKS4",
     *             giftCardId: "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
     *             activateActivityDetails: {
     *                 orderId: "jJNGHm4gLI6XkFbwtiSLqK72KkAZY",
     *                 lineItemUid: "eIWl7X0nMuO9Ewbh0ChIx"
     *             }
     *         }
     *     })
     */
    create(request: Square.giftCards.CreateGiftCardActivityRequest, requestOptions?: Activities.RequestOptions): Promise<Square.CreateGiftCardActivityResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
