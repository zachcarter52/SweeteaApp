/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace BreakTypes {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class BreakTypes {
    protected readonly _options: BreakTypes.Options;
    constructor(_options?: BreakTypes.Options);
    /**
     * Returns a paginated list of `BreakType` instances for a business.
     *
     * @param {Square.labor.ListBreakTypesRequest} request
     * @param {BreakTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.breakTypes.list()
     */
    list(request?: Square.labor.ListBreakTypesRequest, requestOptions?: BreakTypes.RequestOptions): Promise<core.Page<Square.BreakType>>;
    /**
     * Creates a new `BreakType`.
     *
     * A `BreakType` is a template for creating `Break` objects.
     * You must provide the following values in your request to this
     * endpoint:
     *
     * - `location_id`
     * - `break_name`
     * - `expected_duration`
     * - `is_paid`
     *
     * You can only have three `BreakType` instances per location. If you attempt to add a fourth
     * `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
     * is returned.
     *
     * @param {Square.labor.CreateBreakTypeRequest} request
     * @param {BreakTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.breakTypes.create({
     *         idempotencyKey: "PAD3NG5KSN2GL",
     *         breakType: {
     *             locationId: "CGJN03P1D08GF",
     *             breakName: "Lunch Break",
     *             expectedDuration: "PT30M",
     *             isPaid: true
     *         }
     *     })
     */
    create(request: Square.labor.CreateBreakTypeRequest, requestOptions?: BreakTypes.RequestOptions): Promise<Square.CreateBreakTypeResponse>;
    /**
     * Returns a single `BreakType` specified by `id`.
     *
     * @param {Square.labor.GetBreakTypesRequest} request
     * @param {BreakTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.breakTypes.get({
     *         id: "id"
     *     })
     */
    get(request: Square.labor.GetBreakTypesRequest, requestOptions?: BreakTypes.RequestOptions): Promise<Square.GetBreakTypeResponse>;
    /**
     * Updates an existing `BreakType`.
     *
     * @param {Square.labor.UpdateBreakTypeRequest} request
     * @param {BreakTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.breakTypes.update({
     *         id: "id",
     *         breakType: {
     *             locationId: "26M7H24AZ9N6R",
     *             breakName: "Lunch",
     *             expectedDuration: "PT50M",
     *             isPaid: true,
     *             version: 1
     *         }
     *     })
     */
    update(request: Square.labor.UpdateBreakTypeRequest, requestOptions?: BreakTypes.RequestOptions): Promise<Square.UpdateBreakTypeResponse>;
    /**
     * Deletes an existing `BreakType`.
     *
     * A `BreakType` can be deleted even if it is referenced from a `Shift`.
     *
     * @param {Square.labor.DeleteBreakTypesRequest} request
     * @param {BreakTypes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.breakTypes.delete({
     *         id: "id"
     *     })
     */
    delete(request: Square.labor.DeleteBreakTypesRequest, requestOptions?: BreakTypes.RequestOptions): Promise<Square.DeleteBreakTypeResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
