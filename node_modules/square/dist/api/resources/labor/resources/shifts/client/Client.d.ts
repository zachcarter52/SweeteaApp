/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Square from "../../../../../index";
export declare namespace Shifts {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Shifts {
    protected readonly _options: Shifts.Options;
    constructor(_options?: Shifts.Options);
    /**
     * Creates a new `Shift`.
     *
     * A `Shift` represents a complete workday for a single team member.
     * You must provide the following values in your request to this
     * endpoint:
     *
     * - `location_id`
     * - `team_member_id`
     * - `start_at`
     *
     * An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
     * - The `status` of the new `Shift` is `OPEN` and the team member has another
     * shift with an `OPEN` status.
     * - The `start_at` date is in the future.
     * - The `start_at` or `end_at` date overlaps another shift for the same team member.
     * - The `Break` instances are set in the request and a break `start_at`
     * is before the `Shift.start_at`, a break `end_at` is after
     * the `Shift.end_at`, or both.
     *
     * @param {Square.labor.CreateShiftRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.shifts.create({
     *         idempotencyKey: "HIDSNG5KS478L",
     *         shift: {
     *             locationId: "PAA1RJZZKXBFG",
     *             startAt: "2019-01-25T03:11:00-05:00",
     *             endAt: "2019-01-25T13:11:00-05:00",
     *             wage: {
     *                 title: "Barista",
     *                 hourlyRate: {
     *                     amount: 1100,
     *                     currency: "USD"
     *                 },
     *                 tipEligible: true
     *             },
     *             breaks: [{
     *                     startAt: "2019-01-25T06:11:00-05:00",
     *                     endAt: "2019-01-25T06:16:00-05:00",
     *                     breakTypeId: "REGS1EQR1TPZ5",
     *                     name: "Tea Break",
     *                     expectedDuration: "PT5M",
     *                     isPaid: true
     *                 }],
     *             teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
     *             declaredCashTipMoney: {
     *                 amount: 500,
     *                 currency: "USD"
     *             }
     *         }
     *     })
     */
    create(request: Square.labor.CreateShiftRequest, requestOptions?: Shifts.RequestOptions): Promise<Square.CreateShiftResponse>;
    /**
     * Returns a paginated list of `Shift` records for a business.
     * The list to be returned can be filtered by:
     * - Location IDs
     * - Team member IDs
     * - Shift status (`OPEN` or `CLOSED`)
     * - Shift start
     * - Shift end
     * - Workday details
     *
     * The list can be sorted by:
     * - `START_AT`
     * - `END_AT`
     * - `CREATED_AT`
     * - `UPDATED_AT`
     *
     * @param {Square.labor.SearchShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.shifts.search({
     *         query: {
     *             filter: {
     *                 workday: {
     *                     dateRange: {
     *                         startDate: "2019-01-20",
     *                         endDate: "2019-02-03"
     *                     },
     *                     matchShiftsBy: "START_AT",
     *                     defaultTimezone: "America/Los_Angeles"
     *                 }
     *             }
     *         },
     *         limit: 100
     *     })
     */
    search(request?: Square.labor.SearchShiftsRequest, requestOptions?: Shifts.RequestOptions): Promise<Square.SearchShiftsResponse>;
    /**
     * Returns a single `Shift` specified by `id`.
     *
     * @param {Square.labor.GetShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.shifts.get({
     *         id: "id"
     *     })
     */
    get(request: Square.labor.GetShiftsRequest, requestOptions?: Shifts.RequestOptions): Promise<Square.GetShiftResponse>;
    /**
     * Updates an existing `Shift`.
     *
     * When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
     * the `end_at` property set to a valid RFC-3339 datetime string.
     *
     * When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
     * set on each `Break`.
     *
     * @param {Square.labor.UpdateShiftRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.shifts.update({
     *         id: "id",
     *         shift: {
     *             locationId: "PAA1RJZZKXBFG",
     *             startAt: "2019-01-25T03:11:00-05:00",
     *             endAt: "2019-01-25T13:11:00-05:00",
     *             wage: {
     *                 title: "Bartender",
     *                 hourlyRate: {
     *                     amount: 1500,
     *                     currency: "USD"
     *                 },
     *                 tipEligible: true
     *             },
     *             breaks: [{
     *                     id: "X7GAQYVVRRG6P",
     *                     startAt: "2019-01-25T06:11:00-05:00",
     *                     endAt: "2019-01-25T06:16:00-05:00",
     *                     breakTypeId: "REGS1EQR1TPZ5",
     *                     name: "Tea Break",
     *                     expectedDuration: "PT5M",
     *                     isPaid: true
     *                 }],
     *             version: 1,
     *             teamMemberId: "ormj0jJJZ5OZIzxrZYJI",
     *             declaredCashTipMoney: {
     *                 amount: 500,
     *                 currency: "USD"
     *             }
     *         }
     *     })
     */
    update(request: Square.labor.UpdateShiftRequest, requestOptions?: Shifts.RequestOptions): Promise<Square.UpdateShiftResponse>;
    /**
     * Deletes a `Shift`.
     *
     * @param {Square.labor.DeleteShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.labor.shifts.delete({
     *         id: "id"
     *     })
     */
    delete(request: Square.labor.DeleteShiftsRequest, requestOptions?: Shifts.RequestOptions): Promise<Square.DeleteShiftResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
