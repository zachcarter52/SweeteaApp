/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Square from "../../../index";
export declare namespace Events {
    interface Options {
        environment?: core.Supplier<environments.SquareEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Square-Version header */
        version?: "2025-03-19";
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Events {
    protected readonly _options: Events.Options;
    constructor(_options?: Events.Options);
    /**
     * Search for Square API events that occur within a 28-day timeframe.
     *
     * @param {Square.SearchEventsRequest} request
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.searchEvents()
     */
    searchEvents(request?: Square.SearchEventsRequest, requestOptions?: Events.RequestOptions): Promise<Square.SearchEventsResponse>;
    /**
     * Disables events to prevent them from being searchable.
     * All events are disabled by default. You must enable events to make them searchable.
     * Disabling events for a specific time period prevents them from being searchable, even if you re-enable them later.
     *
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.disableEvents()
     */
    disableEvents(requestOptions?: Events.RequestOptions): Promise<Square.DisableEventsResponse>;
    /**
     * Enables events to make them searchable. Only events that occur while in the enabled state are searchable.
     *
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.enableEvents()
     */
    enableEvents(requestOptions?: Events.RequestOptions): Promise<Square.EnableEventsResponse>;
    /**
     * Lists all event types that you can subscribe to as webhooks or query using the Events API.
     *
     * @param {Square.ListEventTypesRequest} request
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.listEventTypes()
     */
    listEventTypes(request?: Square.ListEventTypesRequest, requestOptions?: Events.RequestOptions): Promise<Square.ListEventTypesResponse>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
